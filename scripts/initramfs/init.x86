#!/bin/busybox sh
# shellcheck shell=dash
#
#
# Unlike arm devices, an x86 device is much more diverse when it comes to storage devices.
# For this reason, locating all relevant partitions is based on search by UUID.
# An exception is the detecting of additional USB devices, possibly holding a new
# version of the squashfs 'volumio' rootfs
#
#

export PATH=/sbin:/usr/sbin:/bin:/usr/bin

parse_disk() {
  disc="$1"
  if [ "${disc%%=*}" = 'UUID' ] || [ "${disc%%=*}" = 'LABEL' ]; then
    # Is UUID=xxx || Label=xxx
    findfs "$disc"
  elif [ "${disc%/*}" = '/dev' ]; then
    # is a device name
    echo "$disc"
  else
    print_msg "unknown-disk ${disc}"
    exec sh
    exit 0
  fi
}

# Display a message or print directly to /dev/kmsg
print_msg() {
  msgbuf=$1
  if [ "$USE_KMSG" = yes ]; then
    printf "[i] initramfs: %s\n" "${msgbuf}" >/dev/kmsg
  else
    printf "[e] initramfs: %s\n" "${msgbuf}"
  fi
}

update_config_UUIDs() {
  local root_dir=/mnt/configs
  mkdir ${root_dir}
  mount -t auto "${BOOTPART}" "${root_dir}"

  UUID_BOOT=$(blkid -s UUID -o value "${BOOTPART}")
  UUID_IMG=$(blkid -s UUID -o value "${IMGPART}")
  UUID_DATA=$(blkid -s UUID -o value "${DATAPART}")

  mv "${root_dir}"/syslinux.cfg "${root_dir}"/syslinux.cfg.old
  cp "${root_dir}"/syslinux.tmpl "${root_dir}"/syslinux.cfg
  sed -i "s/%%IMGPART%%/${UUID_IMG}/g" "${root_dir}"/syslinux.cfg
  sed -i "s/%%BOOTPART%%/${UUID_BOOT}/g" "${root_dir}"/syslinux.cfg
  sed -i "s/%%DATAPART%%/${UUID_DATA}/g" "${root_dir}"/syslinux.cfg

  mv "${root_dir}"/efi/BOOT/grub.cfg "${root_dir}"/efi/BOOT/grub.cfg.old
  cp "${root_dir}"/efi/BOOT/grub.tmpl "${root_dir}"/efi/BOOT/grub.cfg
  sed -i "s/%%IMGPART%%/${UUID_IMG}/g" "${root_dir}"/efi/BOOT/grub.cfg
  sed -i "s/%%BOOTPART%%/${UUID_BOOT}/g" "${root_dir}"/efi/BOOT/grub.cfg
  sed -i "s/%%DATAPART%%/${UUID_DATA}/g" "${root_dir}"/efi/BOOT/grub.cfg

  umount /mnt/configs
  rm -r /mnt/configs
}

#Set up default values
USE_KMSG="no"
DEBUG="no"

#  -- checking if a firmware update is available on the
#     first partition of any additional USB device
#  -- resizing a newly flashed Volumio device
#     (sentinel in /boot partition)
#  -- creating the overlay fs
#     (rootfs RO and volumio_data (RW)

modprobe overlay
modprobe squashfs
modprobe nls_cp437
modprobe nls_utf8
#modprobe nls_ascii
modprobe fuse
modprobe nvme_core
modprobe nvme
modprobe usb_common
modprobe usbcore
# The EHCI driver should be loaded before the ones for low speed controllers
# or some devices may be confused when they are disconnected and reconnected.
modprobe ehci_hcd
modprobe ehci_pci
modprobe uhci_hcd
modprobe ohci_hcd
modprobe ohci_pci
modprobe xhci_hcd
modprobe xhci_pci
modprobe mmc_core
modprobe mmc_block
modprobe sdhci
modprobe sdhci_pci
modprobe sdhci_acpi
modprobe hid
modprobe usbhid
modprobe hid_cherry
modprobe hid_generic
modprobe loop

# Mount the /proc and /sys filesystems.
[ -d /proc ] || mkdir /proc
mount -t proc none /proc
[ -d /sys ] || mkdir /sys
mount -t sysfs none /sys

mknod /dev/null c 1 3
mknod /dev/tty c 5 0

modprobe usb_storage
modprobe libata
modprobe libahci
modprobe ahci
modprobe pata_atiixp
modprobe sd_mod
modprobe ata_piix
modprobe pata_sch
modprobe pata_sis
modprobe pata_via
modprobe pata_amd
modprobe sata_sis
modprobe sata_via
modprobe ata_generic

sleep 5
mdev -s

#TODO: lookinto why this doesn't work
echo "[Daemon]
Theme=volumio
ShowDelay=0
" >/usr/share/plymouth/plymouthd.defaults
# No need to start plymouth daemon (started already), just show splash
/bin/plymouth --show-splash

# Parse the kernel command line from grub
CMDLINE="$(cat /proc/cmdline)"

for p in ${CMDLINE}; do
  key=${p%%=*}
  value=${p#*=}

  case $key in
  imgpart)
    IMGPART=$(parse_disk "$value")
    ;;
  bootpart)
    BOOTPART=$(parse_disk "$value")
    ;;
  datapart)
    DATAPART=$(parse_disk "$value")
    ;;
  debug)
    DEBUG=yes
    ;;
  imgfile)
    IMGFILE=$value
    ;;
  bootdelay)
    BOOTDELAY=$value
    ;;
  use_kmsg)
    USE_KMSG=$value
    ;;
  esac
done

# Setting default boot delay of 5 seconds
if [ -z "$BOOTDELAY" ]; then
  BOOTDELAY=5
fi

# Mount a tempfs to such that it's accessable later on
mount -t tmpfs -o "noexec,nosuid,size=${RUNSIZE:-10%},mode=0755" tmpfs /run

if [ "${USE_KMSG}" == yes ]; then
  log_output=/dev/kmsg
else
  echo 0 >/proc/sys/kernel/printk
  mkdir -m 0755 /run/initramfs
  log_output=/run/initramfs/initramfs.debug
fi

# Only when debug is on or everytime?
if [ $DEBUG == yes ]; then
  print_msg "Writing initramfs debug log to ${log_output}"
  mkfifo log_pipe
  tee $log_output <log_pipe &
  exec >log_pipe 2>&1
  #exec >$log_output 2>&1             # Doesn't write to console
  #exec >(tee $log_output) 2>&1 2>&1  # Not avaialbe on dash
fi

if [ -z "${BOOTPART}" ]; then
  print_msg "Missing BOOTPART"
  print_msg "Current command: ${CMDLINE}"
  print_msg "Specify the boot, data and squash image partition on the kernel command"
  print_msg "example: kernel... imgpart=/dev/sda2 bootpart=/dev/sda1 datapart=/dev/sda3 imgfile=/volumio_current.sqs or"
  print_msg "         kernel... imgpart=UUID=b99ad11b-ec63-4a8b-8010-816893807ad6 bootpart=UUID=4A8B-8010 datapart=b44ac11b-eabb-5add-8211-816893807ad6 imgfile=/volumio_current.sqs or"
  print_msg "         kernel... imgpart=LABEL=volumioimg bootpart=LABEL=volumioboot datapart=LABEL=volumiodata imgfile=/volumio_current.sqs"
  exec sh
  exit 0
fi

if [ -z "${IMGPART}" ]; then
  print_msg "Missing IMGPART"
  print_msg "Current command: ${CMDLINE}"
  print_msg "Specify the boot, data and squash image partition on the kernel command"
  print_msg "example: kernel... imgpart=/dev/sda2 bootpart=/dev/sda1 datapart=/dev/sda3 imgfile=/volumio_current.sqs or"
  print_msg "         kernel... imgpart=UUID=b99ad11b-ec63-4a8b-8010-816893807ad6 bootpart=UUID=4A8B-8010 datapart=b44ac11b-eabb-5add-8211-816893807ad6 imgfile=/volumio_current.sqs or"
  print_msg "         kernel... imgpart=LABEL=volumioimg bootpart=LABEL=volumioboot datapart=LABEL=volumiodata imgfile=/volumio_current.sqs"
  exec sh
  exit 0
fi

if [ -z "${DATAPART}" ]; then
  print_msg "Missing DATAPART"
  print_msg "Current command: ${CMDLINE}"
  print_msg "Specify the boot, data and squash image partition on the kernel command"
  print_msg "example: kernel... imgpart=/dev/sda2 bootpart=/dev/sda1 datapart=/dev/sda3 imgfile=/volumio_current.sqs or"
  print_msg "         kernel... imgpart=UUID=b99ad11b-ec63-4a8b-8010-816893807ad6 bootpart=UUID=4A8B-8010 datapart=b44ac11b-eabb-5add-8211-816893807ad6 imgfile=/volumio_current.sqs or"
  print_msg "         kernel... imgpart=LABEL=volumioimg bootpart=LABEL=volumioboot datapart=LABEL=volumiodata imgfile=/volumio_current.sqs"
  exec sh
  exit 0
fi

if [ -z "${IMGFILE}" ]; then
  print_msg "Missing IMGFILE"
  print_msg "Current command: ${CMDLINE}"
  print_msg "Specify the boot, data and squash image partition on the kernel command"
  print_msg "example: kernel... imgpart=/dev/sda2 bootpart=/dev/sda1 datapart=/dev/sda3 imgfile=/volumio_current.sqs or"
  print_msg "         kernel... imgpart=UUID=b99ad11b-ec63-4a8b-8010-816893807ad6 bootpart=UUID=4A8B-8010 datapart=b44ac11b-eabb-5add-8211-816893807ad6 imgfile=/volumio_current.sqs or"
  print_msg "         kernel... imgpart=LABEL=volumioimg bootpart=LABEL=volumioboot datapart=LABEL=volumiodata imgfile=/volumio_current.sqs"
  exec sh
  exit 0
fi

print_msg IMGPART="${IMGPART}"
print_msg IMGFILE="${IMGFILE}"
print_msg BOOTPART="${BOOTPART}"
print_msg DATAPART="${DATAPART}"

if [ ! -b "${IMGPART}" ]; then
  print_msg "No partition with ${IMGPART} has been found"
  exec sh
  exit 0
fi

# ok, parsing done
[ -d /mnt ] || mkdir /mnt
# Mount the partitions
# 1) mount the partition where the squash image resides
[ -d /mnt/imgpart ] || mkdir /mnt/imgpart
mount -t ext4 "${IMGPART}" /mnt/imgpart

if [ ! -e "/mnt/imgpart/kernel_current.tar" ] || [ -e "/mnt/imgpart/current_kernel_creation" ]; then
  print_msg "Creating archive for current kernel..."
  touch /mnt/imgpart/current_kernel_creation
  mkdir /mnt/factory
  mount -t vfat ${BOOTPART} /mnt/factory
  # exclude ldlinux.sys from kernel tar's to avoid a relocation during kernel-update or factory-reset
  # (little workaround, as this tar version does not support the --exclude= option)
  mkdir /mnt/imgpart/boot
  cp -pR /mnt/factory/* /mnt/imgpart/boot
  [ -e "/mnt/imgpart/boot/ldlinux.sys" ] && rm /mnt/imgpart/boot/ldlinux.sys
  tar cf /mnt/imgpart/kernel_current.tar -C /mnt/imgpart/boot .
  rm -r /mnt/imgpart/boot
  umount /mnt/factory
  rm -r /mnt/factory
  rm /mnt/imgpart/current_kernel_creation
fi

#
# Step 1: As the image likely has been dd'ed to a bigger disk,
#         the backup GPT table is not at the end of the disk.
# 		  Fix it before doing anything else (only at first boot)
# ==============================================================
#

BOOT_DEVICE=/dev/$(lsblk -no PKNAME "${BOOTPART}")
if fdisk -l "${BOOT_DEVICE}" 2>&1 | grep -q 'GPT PMBR size mismatch'; then
  print_msg "Fix GPT Header!!"
fi
GPTSIZEMISMATCH="$(/usr/sbin/fdisk -l "${BOOT_DEVICE}" 2>&1 | grep 'GPT PMBR size mismatch')"
print_msg "GPTSIZEMISMATCH: ${GPTSIZEMISMATCH}"
if [ ! "x${GPTSIZEMISMATCH}" == "x" ]; then
  print_msg "Alternate (backup) GPT header not at the end of the disk, moving it..."
  sgdisk -e "${BOOT_DEVICE}" >/dev/null 2>&1
  [ -e /mnt/imgpart/move-gpt ] && rm -rf /mnt/imgpart/move-gpt
  print_msg "Succesfully moved the alternate GPT header"
fi

#
# Step 3: Check for Volumio rootfs update
#         or factory reset file on usb
# =======================================
#
if [ ! -z "${BOOTDELAY}" ]; then
  print_msg "Doing a ${BOOTDELAY} second delay here to give kernel load a headstart"
  sleep ${BOOTDELAY}
fi

print_msg "Checking for a volumio rootfs update on a USB device"
mkdir /mnt/usb
for devlink in /dev/sd[a-z]; do
  if [ "${devlink}" == "/dev/sd[a-z]" ]; then
  # no usb devices present
    break
  fi
  # do the first partition of a usb device, must be removable and not the boot device!
  if [ $(lsblk ${devlink} --list -no tran) == usb ] && \
     [ ${BOOT_DEVICE} != ${devlink} ]; then
    mount -t vfat ${devlink}1 /mnt/usb >/dev/null 2>&1
    print_msg "Checking ${devlink}1 for a volumio rootfs update"
    if [ -e /mnt/usb/*.fir ]; then
      print_msg "New rootfs firmware found"
      print_msg "Updating can take several minutes, please wait...."
      mkdir /mnt/boot
      mount -t vfat "${BOOTPART}" /mnt/boot
      volumio-init-updater
      print_msg "USB Update applied"
      umount /mnt/usb >/dev/null 2>&1
      rm -r /mnt/boot
      rm -r /mnt/usb
      print_msg "Restarting"
      echo b >/proc/sysrq-trigger
      break
    fi
    umount /mnt/usb >/dev/null 2>&1
  fi
done

print_msg "Checking for factory reset on a USB device"
for devlink in /dev/sd[a-z]; do
  if [ "${devlink}" == "/dev/sd[a-z]" ]; then
  # no usb devices present
    break
  fi
  # do the first partition of a usb device, must be removable and not the boot device!
  if [ $(lsblk ${devlink} --list -no tran) == usb ] && \
     [ ${BOOT_DEVICE} != ${devlink} ]; then
    mount -t vfat ${devlink}1 /mnt/usb >/dev/null 2>&1
    print_msg "Checking ${devlink}1 for a factory reset"
    if [ -e /mnt/usb/factory_reset ]; then
      mkdir /mnt/factory
      mount -t vfat "${BOOTPART}" /mnt/factory
      echo " " >/mnt/factory/user_data
      print_msg "Factory reset initiated"
      umount /mnt/factory
      rm -r /mnt/factory
      umount /mnt/usb >/dev/null 2>&1
      break
    fi
    umount /mnt/usb >/dev/null 2>&1
  fi
done
rmdir /mnt/usb

#
# Step 4: If there is factory reset or a user-data reset on the boot partition
#         then re-format data partition.
# ============================================================================
#
print_msg "Checking for factory or user-data reset on boot device"
mkdir /mnt/factory
mount -t vfat "${BOOTPART}" /mnt/factory
if [ -e "/mnt/factory/user_data" ]; then
  print_msg "Deleting User Data..."
  #mke2fsfull is used since busybox mke2fs does not include ext4 support
  /sbin/mke2fsfull -t ext4 -F -E stride=2,stripe-width=1024 -b 4096 "${DATAPART}" -L volumio_data >/dev/null 2>&1
  update_config_UUIDs
  rm /mnt/factory/user_data
  print_msg "User Data successfully deleted "
fi
umount /mnt/factory
rm -r /mnt/factory

#
# Step 5: Handling of kernel updates
# ===========================================================
#
# if the update failed before completion
mkdir boot
mount -t vfat "${BOOTPART}" /boot
if [ -e "/boot/update_process" ]; then
  print_msg "Previous update attempt failed, restoring fallbacks"
  cp /mnt/imgpart/kernel_fallback.tar /mnt/imgpart/kernel_current.tar
  cp /mnt/imgpart/volumio_fallback.tar /mnt/imgpart/volumio_current.tar
  if [ -e "/boot/kernel_update" ]; then
    rm /boot/kernel_update
  fi
  rm /boot/update_process
fi

# if the kernel has been updated, and no error has occurred before completition
# Retrieve current UUID of boot and image partition
# These need to be edited into the new boot configs to make the new update bootable
# This is an update on an existing installation, do not resize the data partition
# Just remove the sentinel
if [ -e "/boot/kernel_update" ]; then
  print_msg "unpacking kernel"
  tar xf /mnt/imgpart/kernel_current.tar -C /boot
  #TODO: Will the second mounting of BOOTPART fail?
  update_config_UUIDs
  rm /boot/resize-volumio-datapart
  rm /boot/kernel_update
  umount /boot
  rm -rf /boot
  echo b >/proc/sysrq-trigger
fi

#
# Step 6: Re-size the data partition
# ==================================
#
DATADEV=/dev/$(lsblk -no PKNAME "${DATAPART}")
# Re-sizing is not necessary when we already reached maximum (shows with decimals less than 1MB).
FREESIZE="$(parted -s "${DATADEV}" unit MB print free | tail -n 2 | grep Free | awk '{print $3}' | awk -F 'MB' '{print $1}')"
if [ "$(awk 'BEGIN {print ("'$FREESIZE'" >= "'1'")}')" -eq "1" ]; then
  print_msg "Re-sizing Volumio data partition..."
  END="$(parted -s "${DATADEV}" unit MB print free | grep Free | tail -1 | awk '{print $2}' | grep -o '[0-9]\+')"
  parted -s "${DATADEV}" resizepart 3 "${END}" >/dev/null 2>&1
  e2fsck -f "${DATAPART}" -y >/dev/null 2>&1
  resize2fs -p "${DATAPART}" >/dev/null 2>&1
  print_msg "Volumio data partition succesfully resized"
  parted -s "${DATADEV}" unit MB print >/dev/null 2>&1
fi
umount /boot
rm -r /boot

#
# Step 7: mount the squashfs (RO) on /mnt/static
# ==============================================
#
loop_free=$(losetup -f | sed 's#p/#p#')
#wait for the device to become ready
sleep 3
mdev -s

losetup "$loop_free" /mnt/imgpart/"${IMGFILE}"

mkdir /mnt/static
mount -t squashfs "$loop_free" /mnt/static
#shellcheck source=/dev/null
. /mnt/static/etc/os-release
print_msg "Volumio version ${VOLUMIO_VERSION}"
#
# Step 8: mount the dynamic (RW) datapart on /mnt/ext
# ===================================================
#
[ -d /mnt/ext ] || mkdir /mnt/ext
mount -t ext4 "${DATAPART}" /mnt/ext
[ -d /mnt/ext/dyn ] || mkdir /mnt/ext/dyn
[ -d /mnt/ext/union ] || mkdir /mnt/ext/union
[ -d /mnt/ext/work ] || mkdir /mnt/ext/work

# Step 9: Create the overlay from RO and RW partitions
# ====================================================

mount -t overlay -olowerdir=/mnt/static,upperdir=/mnt/ext/dyn,workdir=/mnt/ext/work overlay /mnt/ext/union

# Clean up.
[ -d /mnt/ext/union/static ] || mkdir /mnt/ext/union/static
[ -d /mnt/ext/union/imgpart ] || mkdir /mnt/ext/union/imgpart
mount --move /mnt/static /mnt/ext/union/static
mount --move /mnt/imgpart /mnt/ext/union/imgpart

chmod -R 777 /mnt/ext/union/imgpart

# Step 10: The UUID of the bootpartition could possibly not match the one used in fstab.
#          This is the case when an new version of the squash file has been created.
#          This step fixes that
# ============================================================================================
UUID_BOOT=$(blkid -s UUID -o value "${BOOTPART}")
print_msg "Checking if fstab needs to be updated.."
print_msg "Current ${BOOTPART} - UUID=${UUID_BOOT}"
print_msg "Current fstb \boot"
# Check if we need to update fstab
if ! grep -q "^UUID=${UUID_BOOT}" /mnt/ext/union/etc/fstab; then
  print_msg "Updating fstab"
  mv -f /mnt/ext/union/etc/fstab /mnt/ext/union/etc/fstab.prev
  sed "s/%%BOOTPART%%/UUID=${UUID_BOOT}/g" /mnt/ext/union/etc/fstab.tmpl >/mnt/ext/union/etc/fstab
fi
print_msg "Volumio: ${VOLUMIO_VERSION}"
print_msg "Finishing initramfs, switching rootfs and starting the boot process..."

# Move /run to the root so our logs are there when we boot
mount -n -o move /run /mnt/ext/union/run
[ -f log_pipe ] && rm log_pipe

umount /proc
umount /sys

/bin/plymouth --newroot=/mnt/ext/union

exec switch_root /mnt/ext/union /sbin/init || echo "Failed to switch_root, dropping to a shell"
exec sh
