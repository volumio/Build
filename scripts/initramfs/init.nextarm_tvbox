#!/bin/busybox sh

# Default PATH differs between shells, and is not automatically exported
# by klibc dash.  Make it consistent.
export PATH=/sbin:/usr/sbin:/bin:/usr/bin

[ -d /proc ] || mkdir /proc
mount -t proc none /proc
[ -d /sys ] || mkdir /sys
mount -t sysfs none /sys

mknod /dev/null c 1 3
mknod /dev/tty c 5 0
[ -e /dev/console ] || mknod /dev/console c 5 1

mdev -s

#Defaults which may be overridden by cmdline parameters
USE_KMSG="yes"
HWDEVICE="empty"
BOOTDEV="mmcblk0"
BOOTCONFIG="empty"
#Device/Partition Separator i.e. the character between parentdev and partition index
DPS="p"
#default values:
IMGPART="/dev/${BOOTDEV}${DPS}2"
DATAPART="/dev/${BOOTDEV}${DPS}3"
BOOTPART="/dev/${BOOTDEV}${DPS}1"

# Display a message or print directly to /dev/kmsg
print_msg() {
  if [ $USE_KMSG == yes ]; then
    echo "initramfs:" $1 >>/dev/kmsg
  else
    echo "initramfs:" $1
  fi
}

# Parse the kernel command line

CMDLINE="$(cat /proc/cmdline)"

parse_disk() {
  if [ "$(echo $1 | cut -c -5)" = "UUID=" ]; then
    # $1 is a UUID
    echo $(findfs $1)
  elif [ "$(echo $1 | cut -c -6)" = "LABEL=" ]; then
    # $1 is a LABEL
    echo $(findfs $1)
  elif [ "$(echo $1 | cut -c -5)" = "/dev/" ]; then
    # $1 is a device name
    echo $1
  else
    # $1 is unrecognized.
    echo "unknown-disk"
  fi
}

DO_GEN=no

for p in ${CMDLINE}; do
  key=${p%%=*}
  value=${p#*=}
  case $key in
  bootdelay)
    BOOTDELAY=$value
    ;;
  esac
done

if [ ! -z "${BOOTDELAY}" ]; then
  print_msg "Boot delay will be ${BOOTDELAY} seconds to give kernel load a headstart"
  sleep ${BOOTDELAY}
fi

for p in ${CMDLINE}; do
  key=${p%%=*}
  value=${p#*=}
  case $key in
  imgpart)
    IMGPART=$(parse_disk $value)
    ;;
  imgfile)
    IMGFILE=$value
    ;;
  use_kmsg)
    USE_KMSG=$value
    ;;
  bootdev)
    BOOTDEV=$value
    ;;
  dps)
    DPS=$value
    ;;
  genpnames)
    DO_GEN=yes
    ;;
  bootpart)
    BOOTPART=$(parse_disk $value)
    ;;
  datapart)
    DATAPART=$(parse_disk $value)
    ;;
  bootconfig)
    #prepend with "/boot/" (add an ending slash to avoid mistakes)
    BOOTCONFIG=/boot/$value
    ;;
  hwdevice)
    HWDEVICE=$value
    ;;
  esac
done
echo
if [ $DO_GEN == yes ]; then
  print_msg "re-generating partition names..."
  IMGPART="/dev/${BOOTDEV}${DPS}2"
  DATAPART="/dev/${BOOTDEV}${DPS}3"
  BOOTPART="/dev/${BOOTDEV}${DPS}1"
fi
#Hardware specific adaptions

#When we did not already get the device name from the cmdline, try getting it from cpuinfo
if [ $HWDEVICE == empty ]; then
  HWDEVICE="$(cat /proc/cpuinfo | grep Hardware | awk '{print $3}')"
fi

if [ $HWDEVICE == ODROID-C2 ]; then
  exec >/dev/kmsg 2>&1 </dev/console
fi

# Odroid C1, SparkySBC, Banana PI, Pine64 and Cubox have overlayfs version < V22
if [ $HWDEVICE == ODROIDC ] || [ $HWDEVICE == gs705a ] || [ $HWDEVICE == sun50iw1p1 ] || [ $HWDEVICE == sun8iw11p1 ] || [ $HWDEVICE == Freescale ]; then
  OVERLAY=NOWRKDIR
  exec >/dev/kmsg 2>&1 </dev/console
else
  OVERLAY=WITHWRKDIR
fi

print_msg "Booting Volumio for ${HWDEVICE}"
print_msg "	This script mounts rootfs RO with an overlay RW layer."
if [ $OVERLAY == WITHWRKDIR ]; then
  # For overlayfs version V22 or higher (modulename 'overlay')
  modprobe overlay
else
  # For overlayfs version V20/V21 (modulename ='overlayfs')
  modprobe overlayfs
fi
modprobe squashfs
modprobe nls_cp437

print_msg IMGPART=${IMGPART}
print_msg IMGFILE=${IMGFILE}
print_msg DATAPART=${DATAPART}
print_msg BOOTPART=${BOOTPART}
print_msg BOOTCONFIG=${BOOTCONFIG}

if [ -z "${IMGPART}" ]; then
  print_msg "Specify the squash image partition after the kernel command ${CMDLINE}"
  print_msg "example: kernel... imgpart=/dev/sda2 imgfile=/gentoo.sqs"
  exec sh
  exit 0
fi

if [ -z "${IMGFILE}" ]; then
  print_msg "Specify the squash image file after the kernel command ${CMDLINE}"
  print_msg "example: kernel... imgpart=/dev/sda2 imgfile=/gentoo.sqs"
  exec sh
  exit 0
fi

UUIDFMT=$(cat /proc/cmdline | grep "UUID=" -o)
if [ ! -z "${UUIDFMT}" ]; then
  if [ $BOOTCONFIG == empty ]; then
    print_msg "Error: when using UUIDs for disk parsing, you MUST also add the bootconfig parameter (eg. bootconfig=/extlinux/extlinux.conf)"
    #    exec sh
    #    exit 0
  fi
fi

# Retry mdev -s 3 times before throwing the towel
for i in 1 2 3 4 5 6; do
  if [ ! -b "${IMGPART}" ]; then
    print_msg "${IMGPART} not detected,retrying mdev in 5 seconds"
    sleep 0.5
    mdev -s
  else
    break
  fi
done

if [ ! -b "${IMGPART}" ]; then
  print_msg "No partition with ${IMGPART} has been found"
  exec sh
  exit 0
fi

# ok, parsing done
[ -d /mnt ] || mkdir /mnt
# Mount the partitions
# 1) mount the partition where the squash image resides
[ -d /mnt/imgpart ] || mkdir /mnt/imgpart
mount -t ext4 ${IMGPART} /mnt/imgpart

if [ ! -e "/mnt/imgpart/kernel_current.tar" ] || [ -e "/mnt/imgpart/curret_kernel_creation" ]; then
  print_msg "Creating archive for current kernel..."
  touch /mnt/imgpart/curret_kernel_creation
  mkdir /mnt/factory
  mount -t vfat /dev/${BOOTDEV}p1 /mnt/factory
  tar cf /mnt/imgpart/kernel_current.tar -C /mnt/factory .
  umount /mnt/factory
  rm -r /mnt/factory
  rm /mnt/imgpart/curret_kernel_creation
  sync
fi

print_msg "Checking for USB updates if you did not boot from USB..."
[ -e /dev/sda1 ] || mdev -s
if [ -e /dev/sda1 ] && [ ! "/dev/sda1" == "${BOOTPART}" ]; then
  [ -d /mnt/usb ] || mkdir /mnt/usb
  mount -t auto /dev/sda1 /mnt/usb
  #If there is a firmware file inside the usb
  if [ -e /mnt/usb/*.fir ]; then
    print_msg "Firmware found, updating will take a few minutes, please wait..."
    mkdir /mnt/boot
    mount -t auto ${BOOTPART} /mnt/boot
    #when the partitions are mounted we can launch the update script
    volumio-init-updater
    sync
    print_msg "USB Update applied"
    umount /mnt/boot
    rm -r /mnt/boot
    print_msg "Restarting"
    echo b >/proc/sysrq-trigger
  fi
  if [ -e /mnt/usb/factory_reset ]; then
    print_msg "Factory Reset on USB"
    mkdir /mnt/factory
    mount -t auto ${BOOTPART} /mnt/factory
    echo " " >/mnt/factory/user_data
    umount /mnt/factory
    rm -r /mnt/factory
    rm /mnt/usb/factory_reset
  fi
  umount /dev/sda1
  rm -r /mnt/usb
else
  if [ "/dev/sda1" == "${BOOTPART}" ]; then
    print_msg "Not checking for firmware if you boot from USB. Sorry!"
  else
    print_msg "No USB device detected (when incorrect, try adding 'bootdelay=5' to your boot cmdline)"
  fi
fi

# 2) init a loop pointing to the image file
loop_free=$(losetup -f | sed s#p/#p#)
if [ ! -e ${loop_free} ]; then
  print_msg "Device node does not exist, creating it..."
  # use last char from loop_device as minor device number
  minor=$(echo ${loop_free} | sed 's/.*\(.\)/\1/')
  mknod $loop_free b 7 $minor
fi
losetup $loop_free /mnt/imgpart/${IMGFILE}

# 3) mount the squashfs to /mnt/static
[ -d /mnt/static ] || mkdir /mnt/static
mount -t squashfs $loop_free /mnt/static

VOLUMIO_VERSION="$(cat /mnt/static/etc/os-release | grep VOLUMIO_VERSION)"

#if there is factory file then format data partition
#
mkdir /mnt/factory
mount -t auto ${BOOTPART} /mnt/factory

if [ -e "/mnt/factory/user_data" ]; then
  print_msg "Deleting User Data"
  mke2fs -t ext4 -F -E stride=2,stripe-width=1024 -b 4096 ${DATAPART} -L volumio_data
  rm /mnt/factory/user_data
  print_msg "User Data successfully deleted "
fi
umount /mnt/factory
rm -r /mnt/factory

# if the update failed before completion
mkdir boot
mount -t vfat ${BOOTPART} /boot
if [ -e "/boot/update_process" ]; then
  print_msg "Previous update attempt failed, restoring fallbacks"
  cp /mnt/imgpart/kernel_fallback.tar /mnt/imgpart/kernel_current.tar
  cp /mnt/imgpart/volumio_fallback.tar /mnt/imgpart/volumio_current.tar
  if [-e "/boot/kernel_update" ]; then
    rm /boot/kernel_update
  fi
  rm /boot/update_process
fi

# if the kernel has been updated, and no error has occurred before completition
if [ -e "/boot/kernel_update" ]; then
  print_msg "unpacking kernel"
  tar xf /mnt/imgpart/kernel_current.tar -C /boot
  if [ -e "/mnt/imgpart/config.txt.bak" ]; then
    print_msg "Restoring custom config.txt content"
    I2S=$(sed -n -e '/#### Volumio i2s setting below: do not alter ####/,$p' /mnt/imgpart/config.txt.bak)
    echo "" >>/boot/config.txt
    echo "$I2S" >>/boot/config.txt
    rm /mnt/imgpart/config.txt.bak
  fi

  # When a new volumio version is loaded, partition UUIDs will have changed.
  # So if the boot cmdline uses "UUID=" format for disk parsing, there will be a mismatch.
  if [ ! -z "${UUIDFMT}" ]; then
    print_msg "The boot configuration holds new UUIDs, replace them with ones from the current device partitions."
    UUID_BOOT=$(blkid -s UUID -o value ${BOOTPART})
    UUID_IMG=$(blkid -s UUID -o value ${IMGPART})
    UUID_DATA=$(blkid -s UUID -o value ${DATAPART})
    cp $BOOTCONFIG $BOOTCONFIG.old
    sed -i "s/imgpart=UUID=[a-fA-F0-9]\{8\}-[A-Fa-f0-9]\{4\}-[A-Fa-f0-9]\{4\}-[A-Fa-f0-9]\{4\}-[A-Fa-f0-9]\{12\}/imgpart=UUID=${UUID_IMG}/g" ${BOOTCONFIG}
    sed -i "s/datapart=UUID=[a-fA-F0-9]\{8\}-[A-Fa-f0-9]\{4\}-[A-Fa-f0-9]\{4\}-[A-Fa-f0-9]\{4\}-[A-Fa-f0-9]\{12\}/datapart=UUID=${UUID_DATA}/g" ${BOOTCONFIG}
    sed -i "s/bootpart=UUID=[a-fA-F0-9]\{4\}-[a-fA-F0-9]\{4\}/bootpart=UUID=${UUID_BOOT}/g" ${BOOTCONFIG}
  fi

  rm /boot/kernel_update
  sync
  umount /boot
  rm -rf /boot
  echo b >/proc/sysrq-trigger
fi

# if data partition needs to be resized
#mount -t auto /dev/${BOOTDEV}p1 /boot
if [ -e "/boot/resize-volumio-datapart" ]; then
  print_msg "Re-sizing Volumio data partition"
  END="$(parted -s /dev/${BOOTDEV} unit MB print free | grep Free | tail -1 | awk '{print $2}' | grep -o '[0-9]\+')"
  parted -s /dev/${BOOTDEV} resizepart 3 ${END}
  e2fsck -fy ${DATAPART}
  #force resize as we did just run e2fsck. Resize2fs seems ro not detect this occasionally
  resize2fs -f ${DATAPART}
  print_msg "Volumio data partition successfully resized"
  parted -s /dev/${BOOTDEV} unit MB print
  rm /boot/resize-volumio-datapart
fi

# clear the mountpoint
umount /boot
rm -rf /boot

# 4) mount a filesystem for write access to the static image
# unclear: memory size? -o size=1024M
[ -d /mnt/ext ] || mkdir -m 777 /mnt/ext
mount -t ext4 -o noatime ${DATAPART} /mnt/ext

[ -d /mnt/ext/dyn ] || mkdir -m 777 /mnt/ext/dyn
[ -d /mnt/ext/union ] || mkdir -m 777 /mnt/ext/union

# 5) mount the writable overlay to the static image
if [ $OVERLAY == WITHWRKDIR ]; then
  [ -d /mnt/ext/work ] || mkdir -m 777 /mnt/ext/work
  print_msg "With Option:" $OVERLAY
  mount -t overlay -olowerdir=/mnt/static,upperdir=/mnt/ext/dyn,workdir=/mnt/ext/work overlay /mnt/ext/union
else
  print_msg "Without Option:" $OVERLAY
  mount -t overlayfs overlayfs /mnt/ext/union -olowerdir=/mnt/static,upperdir=/mnt/ext/dyn
fi

[ -d /mnt/ext/union/static ] || mkdir -m 777 /mnt/ext/union/static
[ -d /mnt/ext/union/imgpart ] || mkdir -m 777 /mnt/ext/union/imgpart
mount --move /mnt/static /mnt/ext/union/static
mount --move /mnt/imgpart /mnt/ext/union/imgpart

chmod -R 777 /mnt/ext/union/imgpart

# 6) We know the current boot partition parsed from /proc/cmdline
# Ensure the /boot entry in fstab matches the UUID (or the device) from the cmdline
# The value in fstab could differ after updating to a new image version in case someone
# manually edited the bootdevice in cmdline before OR when a UUID is used to find the boot partition.
UUID_BOOT=$(blkid -s UUID -o value ${BOOTPART})
DEVFSTAB=$(cat /mnt/ext/union/etc/fstab | grep -E "[0-9A-F]{4}-[0-9A-F]{4}" -o)
if [ ! -z "${DEVFSTAB}" ]; then
  print_msg "found fstab entry with UUID=${DEVFSTAB} for /boot"
  if [ ! $UUID_BOOT == $DEVFSTAB ]; then
    sed -i "s/${DEVFSTAB}/${UUID_BOOT}/g" /mnt/ext/union/etc/fstab
    print_msg "fstab entry updated to UUID=${DEVFSTAB}"
  fi
else
  DEVFSTAB=$(cat /mnt/ext/union/etc/fstab | grep -E "^/dev/[a-z]{3,6}[0-9]{1,2}[a-z]{0,1}[0-9]{0,2}" -o)
  if [ -z "${DEVFSTAB}" ]; then
    #   normally never gets here ;)
    print_msg "Incompatible fstab, no entry found for /boot"
    #    exec sh
    #    exit 0
  fi
  print_msg "found fstab entry with device ${DEVFSTAB} for /boot"
  if [ ! $BOOTPART == $DEVFSTAB ]; then
    sed -i "s/${DEVFSTAB}/${BOOTPART}/g" /mnt/ext/union/etc/fstab
    print_msg "fstab entry updated to ${DEVFSTAB}"
  else
    [ -d /mnt/ext/union/boot ] || mkdir -m 777 /mnt/ext/union/boot
    mount -t vfat -o defaults,utf8,user,rw,umask=111,dmask=000 ${BOOTPART} /mnt/ext/union/boot
  fi
fi

umount /proc
umount /sys

print_msg ${VOLUMIO_VERSION}
print_msg "Finish initramfs, continue booting Volumio"
exec switch_root /mnt/ext/union /sbin/init

print_msg "Failed to switch_root, dropping to a shell"
exec sh
